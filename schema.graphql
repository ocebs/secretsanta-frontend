"""
The root query type which gives access points into the data universe.
"""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Fetches an object given its globally unique `ID`.
  """
  node(
    """
    The globally unique `ID`.
    """
    nodeId: ID!
  ): Node

  """
  Reads and enables pagination through a set of `Country`.
  """
  countries(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Country`.
    """
    orderBy: [CountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CountryCondition
  ): CountriesConnection

  """
  Reads and enables pagination through a set of `Matchup`.
  """
  matchups(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Matchup`.
    """
    orderBy: [MatchupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchupCondition
  ): MatchupsConnection

  """
  Reads and enables pagination through a set of `Message`.
  """
  messages(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Message`.
    """
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition
  ): MessagesConnection

  """
  Reads and enables pagination through a set of `Profile`.
  """
  profiles(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Profile`.
    """
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition
  ): ProfilesConnection
  country(id: Int!): Country
  countryByName(name: String!): Country
  matchup(id: UUID!): Matchup
  message(id: UUID!): Message
  profile(id: UUID!): Profile
  profileByUserId(userId: BigInt!): Profile
  currentProfile: Profile
  currentProfileId: UUID
  currentSession: Session
  currentUser: User

  """
  Reads a single `Country` using its globally unique `ID`.
  """
  countryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Country`.
    """
    nodeId: ID!
  ): Country

  """
  Reads a single `Matchup` using its globally unique `ID`.
  """
  matchupByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Matchup`.
    """
    nodeId: ID!
  ): Matchup

  """
  Reads a single `Message` using its globally unique `ID`.
  """
  messageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Message`.
    """
    nodeId: ID!
  ): Message

  """
  Reads a single `Profile` using its globally unique `ID`.
  """
  profileByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Profile`.
    """
    nodeId: ID!
  ): Profile
}

"""
An object with a globally unique `ID`.
"""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A connection to a list of `Country` values.
"""
type CountriesConnection {
  """
  A list of `Country` objects.
  """
  nodes: [Country!]!

  """
  A list of edges which contains the `Country` and cursor to aid in pagination.
  """
  edges: [CountriesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Country` you could get from the connection.
  """
  totalCount: Int!
}

type Country implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String

  """
  Reads and enables pagination through a set of `Profile`.
  """
  profiles(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Profile`.
    """
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition
  ): ProfilesConnection!
}

"""
A connection to a list of `Profile` values.
"""
type ProfilesConnection {
  """
  A list of `Profile` objects.
  """
  nodes: [Profile!]!

  """
  A list of edges which contains the `Profile` and cursor to aid in pagination.
  """
  edges: [ProfilesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Profile` you could get from the connection.
  """
  totalCount: Int!
}

type Profile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  userId: BigInt
  name: String
  bio: String
  address: String
  countryId: Int

  """
  Reads a single `Country` that is related to this `Profile`.
  """
  country: Country

  """
  Reads and enables pagination through a set of `Matchup`.
  """
  matchupsBySenderId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Matchup`.
    """
    orderBy: [MatchupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchupCondition
  ): MatchupsConnection!

  """
  Reads and enables pagination through a set of `Matchup`.
  """
  matchupsByRecipientId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Matchup`.
    """
    orderBy: [MatchupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchupCondition
  ): MatchupsConnection!

  """
  Reads and enables pagination through a set of `Message`.
  """
  messagesBySenderId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Message`.
    """
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition
  ): MessagesConnection!
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A connection to a list of `Matchup` values.
"""
type MatchupsConnection {
  """
  A list of `Matchup` objects.
  """
  nodes: [Matchup!]!

  """
  A list of edges which contains the `Matchup` and cursor to aid in pagination.
  """
  edges: [MatchupsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Matchup` you could get from the connection.
  """
  totalCount: Int!
}

type Matchup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  senderId: UUID
  recipientId: UUID

  """
  Reads a single `Profile` that is related to this `Matchup`.
  """
  sender: Profile

  """
  Reads a single `Profile` that is related to this `Matchup`.
  """
  recipient: Profile

  """
  Reads and enables pagination through a set of `Message`.
  """
  messagesByMatchup(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Message`.
    """
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition
  ): MessagesConnection!
}

"""
A connection to a list of `Message` values.
"""
type MessagesConnection {
  """
  A list of `Message` objects.
  """
  nodes: [Message!]!

  """
  A list of edges which contains the `Message` and cursor to aid in pagination.
  """
  edges: [MessagesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Message` you could get from the connection.
  """
  totalCount: Int!
}

type Message implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  senderId: UUID
  timestamp: Datetime
  message: String
  matchup: UUID

  """
  Reads a single `Profile` that is related to this `Message`.
  """
  sender: Profile

  """
  Reads a single `Matchup` that is related to this `Message`.
  """
  matchupByMatchup: Matchup
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A `Message` edge in the connection.
"""
type MessagesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Message` at the end of the edge.
  """
  node: Message!
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

"""
Methods to use when ordering `Message`.
"""
enum MessagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SENDER_ID_ASC
  SENDER_ID_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  MESSAGE_ASC
  MESSAGE_DESC
  MATCHUP_ASC
  MATCHUP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Message` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MessageCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: UUID

  """
  Checks for equality with the object’s `senderId` field.
  """
  senderId: UUID

  """
  Checks for equality with the object’s `timestamp` field.
  """
  timestamp: Datetime

  """
  Checks for equality with the object’s `message` field.
  """
  message: String

  """
  Checks for equality with the object’s `matchup` field.
  """
  matchup: UUID
}

"""
A `Matchup` edge in the connection.
"""
type MatchupsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Matchup` at the end of the edge.
  """
  node: Matchup!
}

"""
Methods to use when ordering `Matchup`.
"""
enum MatchupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SENDER_ID_ASC
  SENDER_ID_DESC
  RECIPIENT_ID_ASC
  RECIPIENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Matchup` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MatchupCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: UUID

  """
  Checks for equality with the object’s `senderId` field.
  """
  senderId: UUID

  """
  Checks for equality with the object’s `recipientId` field.
  """
  recipientId: UUID
}

"""
A `Profile` edge in the connection.
"""
type ProfilesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Profile` at the end of the edge.
  """
  node: Profile!
}

"""
Methods to use when ordering `Profile`.
"""
enum ProfilesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  NAME_ASC
  NAME_DESC
  BIO_ASC
  BIO_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  COUNTRY_ID_ASC
  COUNTRY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Profile` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProfileCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: UUID

  """
  Checks for equality with the object’s `userId` field.
  """
  userId: BigInt

  """
  Checks for equality with the object’s `name` field.
  """
  name: String

  """
  Checks for equality with the object’s `bio` field.
  """
  bio: String

  """
  Checks for equality with the object’s `address` field.
  """
  address: String

  """
  Checks for equality with the object’s `countryId` field.
  """
  countryId: Int
}

"""
A `Country` edge in the connection.
"""
type CountriesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Country` at the end of the edge.
  """
  node: Country!
}

"""
Methods to use when ordering `Country`.
"""
enum CountriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Country` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CountryCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `name` field.
  """
  name: String
}

type Session {
  id: UUID!
  timestamp: Datetime!
  userId: BigInt
  description: String
}

type User {
  id: BigInt!
  lastlogin: Datetime
  role: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Creates a single `Matchup`.
  """
  createMatchup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMatchupInput!
  ): CreateMatchupPayload

  """
  Creates a single `Message`.
  """
  createMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMessageInput!
  ): CreateMessagePayload

  """
  Creates a single `Profile`.
  """
  createProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProfileInput!
  ): CreateProfilePayload

  """
  Updates a single `Matchup` using its globally unique id and a patch.
  """
  updateMatchupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMatchupByNodeIdInput!
  ): UpdateMatchupPayload

  """
  Updates a single `Matchup` using a unique key and a patch.
  """
  updateMatchup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMatchupInput!
  ): UpdateMatchupPayload

  """
  Updates a single `Message` using its globally unique id and a patch.
  """
  updateMessageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessageByNodeIdInput!
  ): UpdateMessagePayload

  """
  Updates a single `Message` using a unique key and a patch.
  """
  updateMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessageInput!
  ): UpdateMessagePayload

  """
  Updates a single `Profile` using its globally unique id and a patch.
  """
  updateProfileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileByNodeIdInput!
  ): UpdateProfilePayload

  """
  Updates a single `Profile` using a unique key and a patch.
  """
  updateProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileInput!
  ): UpdateProfilePayload

  """
  Updates a single `Profile` using a unique key and a patch.
  """
  updateProfileByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileByUserIdInput!
  ): UpdateProfilePayload

  """
  Deletes a single `Matchup` using its globally unique id.
  """
  deleteMatchupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMatchupByNodeIdInput!
  ): DeleteMatchupPayload

  """
  Deletes a single `Matchup` using a unique key.
  """
  deleteMatchup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMatchupInput!
  ): DeleteMatchupPayload

  """
  Deletes a single `Message` using its globally unique id.
  """
  deleteMessageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageByNodeIdInput!
  ): DeleteMessagePayload

  """
  Deletes a single `Message` using a unique key.
  """
  deleteMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageInput!
  ): DeleteMessagePayload

  """
  Deletes a single `Profile` using its globally unique id.
  """
  deleteProfileByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfileByNodeIdInput!
  ): DeleteProfilePayload

  """
  Deletes a single `Profile` using a unique key.
  """
  deleteProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfileInput!
  ): DeleteProfilePayload

  """
  Deletes a single `Profile` using a unique key.
  """
  deleteProfileByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfileByUserIdInput!
  ): DeleteProfilePayload
  createSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSessionInput!
  ): CreateSessionPayload
}

"""
The output of our create `Matchup` mutation.
"""
type CreateMatchupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Matchup` that was created by this mutation.
  """
  matchup: Matchup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profile` that is related to this `Matchup`.
  """
  sender: Profile

  """
  Reads a single `Profile` that is related to this `Matchup`.
  """
  recipient: Profile

  """
  An edge for our `Matchup`. May be used by Relay 1.
  """
  matchupEdge(
    """
    The method to use when ordering `Matchup`.
    """
    orderBy: [MatchupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MatchupsEdge
}

"""
All input for the create `Matchup` mutation.
"""
input CreateMatchupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Matchup` to be created by this mutation.
  """
  matchup: MatchupInput!
}

"""
An input for mutations affecting `Matchup`
"""
input MatchupInput {
  id: UUID
  senderId: UUID
  recipientId: UUID
}

"""
The output of our create `Message` mutation.
"""
type CreateMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Message` that was created by this mutation.
  """
  message: Message

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profile` that is related to this `Message`.
  """
  sender: Profile

  """
  Reads a single `Matchup` that is related to this `Message`.
  """
  matchupByMatchup: Matchup

  """
  An edge for our `Message`. May be used by Relay 1.
  """
  messageEdge(
    """
    The method to use when ordering `Message`.
    """
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""
All input for the create `Message` mutation.
"""
input CreateMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Message` to be created by this mutation.
  """
  message: MessageInput!
}

"""
An input for mutations affecting `Message`
"""
input MessageInput {
  id: UUID
  senderId: UUID
  timestamp: Datetime
  message: String
  matchup: UUID
}

"""
The output of our create `Profile` mutation.
"""
type CreateProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Profile` that was created by this mutation.
  """
  profile: Profile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Country` that is related to this `Profile`.
  """
  country: Country

  """
  An edge for our `Profile`. May be used by Relay 1.
  """
  profileEdge(
    """
    The method to use when ordering `Profile`.
    """
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfilesEdge
}

"""
All input for the create `Profile` mutation.
"""
input CreateProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Profile` to be created by this mutation.
  """
  profile: ProfileInput!
}

"""
An input for mutations affecting `Profile`
"""
input ProfileInput {
  id: UUID
  userId: BigInt
  name: String
  bio: String
  address: String
  countryId: Int
}

"""
The output of our update `Matchup` mutation.
"""
type UpdateMatchupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Matchup` that was updated by this mutation.
  """
  matchup: Matchup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profile` that is related to this `Matchup`.
  """
  sender: Profile

  """
  Reads a single `Profile` that is related to this `Matchup`.
  """
  recipient: Profile

  """
  An edge for our `Matchup`. May be used by Relay 1.
  """
  matchupEdge(
    """
    The method to use when ordering `Matchup`.
    """
    orderBy: [MatchupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MatchupsEdge
}

"""
All input for the `updateMatchupByNodeId` mutation.
"""
input UpdateMatchupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Matchup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Matchup` being updated.
  """
  patch: MatchupPatch!
}

"""
Represents an update to a `Matchup`. Fields that are set will be updated.
"""
input MatchupPatch {
  id: UUID
  senderId: UUID
  recipientId: UUID
}

"""
All input for the `updateMatchup` mutation.
"""
input UpdateMatchupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Matchup` being updated.
  """
  patch: MatchupPatch!
  id: UUID!
}

"""
The output of our update `Message` mutation.
"""
type UpdateMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Message` that was updated by this mutation.
  """
  message: Message

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profile` that is related to this `Message`.
  """
  sender: Profile

  """
  Reads a single `Matchup` that is related to this `Message`.
  """
  matchupByMatchup: Matchup

  """
  An edge for our `Message`. May be used by Relay 1.
  """
  messageEdge(
    """
    The method to use when ordering `Message`.
    """
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""
All input for the `updateMessageByNodeId` mutation.
"""
input UpdateMessageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Message` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Message` being updated.
  """
  patch: MessagePatch!
}

"""
Represents an update to a `Message`. Fields that are set will be updated.
"""
input MessagePatch {
  id: UUID
  senderId: UUID
  timestamp: Datetime
  message: String
  matchup: UUID
}

"""
All input for the `updateMessage` mutation.
"""
input UpdateMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Message` being updated.
  """
  patch: MessagePatch!
  id: UUID!
}

"""
The output of our update `Profile` mutation.
"""
type UpdateProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Profile` that was updated by this mutation.
  """
  profile: Profile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Country` that is related to this `Profile`.
  """
  country: Country

  """
  An edge for our `Profile`. May be used by Relay 1.
  """
  profileEdge(
    """
    The method to use when ordering `Profile`.
    """
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfilesEdge
}

"""
All input for the `updateProfileByNodeId` mutation.
"""
input UpdateProfileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Profile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  patch: ProfilePatch!
}

"""
Represents an update to a `Profile`. Fields that are set will be updated.
"""
input ProfilePatch {
  id: UUID
  userId: BigInt
  name: String
  bio: String
  address: String
  countryId: Int
}

"""
All input for the `updateProfile` mutation.
"""
input UpdateProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  patch: ProfilePatch!
  id: UUID!
}

"""
All input for the `updateProfileByUserId` mutation.
"""
input UpdateProfileByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  patch: ProfilePatch!
  userId: BigInt!
}

"""
The output of our delete `Matchup` mutation.
"""
type DeleteMatchupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Matchup` that was deleted by this mutation.
  """
  matchup: Matchup
  deletedMatchupNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profile` that is related to this `Matchup`.
  """
  sender: Profile

  """
  Reads a single `Profile` that is related to this `Matchup`.
  """
  recipient: Profile

  """
  An edge for our `Matchup`. May be used by Relay 1.
  """
  matchupEdge(
    """
    The method to use when ordering `Matchup`.
    """
    orderBy: [MatchupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MatchupsEdge
}

"""
All input for the `deleteMatchupByNodeId` mutation.
"""
input DeleteMatchupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Matchup` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMatchup` mutation.
"""
input DeleteMatchupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
The output of our delete `Message` mutation.
"""
type DeleteMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Message` that was deleted by this mutation.
  """
  message: Message
  deletedMessageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profile` that is related to this `Message`.
  """
  sender: Profile

  """
  Reads a single `Matchup` that is related to this `Message`.
  """
  matchupByMatchup: Matchup

  """
  An edge for our `Message`. May be used by Relay 1.
  """
  messageEdge(
    """
    The method to use when ordering `Message`.
    """
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""
All input for the `deleteMessageByNodeId` mutation.
"""
input DeleteMessageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Message` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMessage` mutation.
"""
input DeleteMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
The output of our delete `Profile` mutation.
"""
type DeleteProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Profile` that was deleted by this mutation.
  """
  profile: Profile
  deletedProfileNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Country` that is related to this `Profile`.
  """
  country: Country

  """
  An edge for our `Profile`. May be used by Relay 1.
  """
  profileEdge(
    """
    The method to use when ordering `Profile`.
    """
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfilesEdge
}

"""
All input for the `deleteProfileByNodeId` mutation.
"""
input DeleteProfileByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Profile` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProfile` mutation.
"""
input DeleteProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""
All input for the `deleteProfileByUserId` mutation.
"""
input DeleteProfileByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userId: BigInt!
}

"""
The output of our `createSession` mutation.
"""
type CreateSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

"""
All input for the `createSession` mutation.
"""
input CreateSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  description: String
}

"""
The root subscription type: contains events and live queries you can subscribe to with the `subscription` operation.

#### Live Queries

Live query fields are differentiated by containing `(live)` at the end of their
description, they are added for each field in the `Query` type. When you
subscribe to a live query field, the selection set will be evaluated and sent to
the client, and then most things\* that would cause the output of the selection
set to change will trigger the selection set to be re-evaluated and the results
to be re-sent to the client.

_(\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified
server-side event occurs. This makes them a lot more efficient than Live
Queries, but it is still recommended that you keep payloads fairly small.
"""
type Subscription {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form. (live)
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. (live)
  """
  nodeId: ID!

  """
  Fetches an object given its globally unique `ID`. (live)
  """
  node(
    """
    The globally unique `ID`.
    """
    nodeId: ID!
  ): Node

  """
  Reads and enables pagination through a set of `Country`. (live)
  """
  countries(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Country`.
    """
    orderBy: [CountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CountryCondition
  ): CountriesConnection

  """
  Reads and enables pagination through a set of `Matchup`. (live)
  """
  matchups(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Matchup`.
    """
    orderBy: [MatchupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MatchupCondition
  ): MatchupsConnection

  """
  Reads and enables pagination through a set of `Message`. (live)
  """
  messages(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Message`.
    """
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition
  ): MessagesConnection

  """
  Reads and enables pagination through a set of `Profile`. (live)
  """
  profiles(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Profile`.
    """
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition
  ): ProfilesConnection

  """
  (live)
  """
  country(id: Int!): Country

  """
  (live)
  """
  countryByName(name: String!): Country

  """
  (live)
  """
  matchup(id: UUID!): Matchup

  """
  (live)
  """
  message(id: UUID!): Message

  """
  (live)
  """
  profile(id: UUID!): Profile

  """
  (live)
  """
  profileByUserId(userId: BigInt!): Profile

  """
  (live)
  """
  currentProfile: Profile

  """
  (live)
  """
  currentProfileId: UUID

  """
  (live)
  """
  currentSession: Session

  """
  (live)
  """
  currentUser: User

  """
  Reads a single `Country` using its globally unique `ID`. (live)
  """
  countryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Country`.
    """
    nodeId: ID!
  ): Country

  """
  Reads a single `Matchup` using its globally unique `ID`. (live)
  """
  matchupByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Matchup`.
    """
    nodeId: ID!
  ): Matchup

  """
  Reads a single `Message` using its globally unique `ID`. (live)
  """
  messageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Message`.
    """
    nodeId: ID!
  ): Message

  """
  Reads a single `Profile` using its globally unique `ID`. (live)
  """
  profileByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Profile`.
    """
    nodeId: ID!
  ): Profile
}
